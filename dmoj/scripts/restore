#!/bin/bash
cd $(dirname $(dirname $0)) || exit
. ./utils/notify


set -e
if [ -z "$1" ]; then
    echo "Usage: restore <filename.sql>"
    echo "Example: restore 2024-06-28_15-25-00.sql"
    exit 1  # Exit with an error code
fi

BACKUP_FILE="$1"
DOCKER_ID=$(docker ps -qf "name=db")
# Verify if the backup file exists
if [ ! -f "$BACKUP_FILE" ]; then
    echo "Error: Backup file '$BACKUP_FILE' not found."
    exit 1  # Exit with an error code
fi

read -rp "Are you sure you want to restore the database from '$BACKUP_FILE'? This will overwrite the current database. [y/N]: " confirmation
if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
    echo "Restore operation cancelled."
    exit 0
fi

# Delay before starting the restore
echo "Starting restore in 10 seconds... (Press Ctrl+C to cancel)"
sleep 10


notify "Restore Started"
echo "Restoring database from $BACKUP_FILE..."

set -a
.  ../environment/mysql.env
.  ../environment/mysql-admin.env

set +a

# todo: add pv? (pipe viewer) to show progress bar
# gunzip -c "${BACKUP_FILE}" | docker exec -i DOCKER_ID mariadb --user="$MYSQL_USER
# drop dmoj database
docker exec "$DOCKER_ID" mariadb --user=root --password="$MYSQL_ROOT_PASSWORD" -e "DROP DATABASE IF EXISTS $MYSQL_DATABASE;"
notify "Dropped database $MYSQL_DATABASE" "true"
notify "Restoring database $MYSQL_DATABASE...."
docker exec -i "$DOCKER_ID" mariadb --user=root --password="$MYSQL_ROOT_PASSWORD" < "${BACKUP_FILE}"

echo "Restore completed successfully."
notify "Restore Completed" "true"
