- hosts: "workers" # todo: change to only passed in IP
  become: true
  become_user: root
  strategy: linear

  vars:
    ansible_ssh_private_key_file: ~/.ssh/id_ed25519
    ansible_python_interpreter: /usr/bin/python3
    docker_edition: 'ce'
    docker_package_state: present
    overlay_network_range: "10.137.0.0/16"

  tasks:
    - name: Run basic tasks (perms)
      ansible.builtin.include_tasks: "tasks/universal_tasks.yml"

    - name: Update apt
      apt:
        update_cache: yes

    - name: 'Add Judge Users'
      ansible.builtin.include_tasks: "tasks/add_judge.yml"

    - name: 'Check if WLMOJ repo exists'
      stat:
        path: /site
      register: wlmoj_repo


    - name: 'Get WLMOJ Repo'
      environment:
        GIT_TERMINAL_PROMPT: 0
      ansible.builtin.git:
        repo: 'https://github.com/mcpt/wlmoj.git'
        clone: true
        recursive: true
        dest: '/site'
      when: wlmoj_repo.stat.exists == false

    - name: 'Disable password for root'
      shell: passwd -d root
      run_once: true

    - name: Ensure Locks Are Released
      shell:
        cmd: |
          while fuser /var/lib/apt/lists/lock /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock >/dev/null 2>&1; do
            sleep 2
          done
      register: locks_released
      until: locks_released.rc == 0
      retries: 10
      delay: 5

    - name: Install Docker
      run_once: true
      include_role:
        name: jsoncameron.docker

    - name: 'Install nfs, pip & ufw'
      apt:
        pkg:
          - nfs-common
          - python3-pip
          - ufw

    - name: "Run network tasks"
      ansible.builtin.include_tasks: "tasks/networking.yml"

    - name: 'Mount nfs share'
      run_once: true
      ansible.posix.mount:
        path: /var/share
        src: 10.137.0.5:/var/share
        state: mounted
        fstype: nfs4
        opts: 'auto,nofail,noatime,nolock,intr,tcp,actimeo=1800,nfsvers=4.1,rw'

    - name: Ensure /var/share and its subdirectories exist with correct permissions
      shell: |
        sudo chown -R judge:homeshare /var/share 
        sudo chmod -R 2770 /var/share
    # 2770  is equivalent to rwxrws---

    - name: Ensure Docker group exists
      group:
        name: docker
        state: present

    - name: Add judge user to Docker group
      user:
        name: judge
        groups: docker
        append: yes

    - name: 'Change timezone to Toronto time'
      shell: timedatectl set-timezone America/Toronto

    - name: "Install updated docker bindings"
      pip:
        name: docker>=7.1.0

    - name: "Install common utils"
      apt:
        pkg:
          - vim
          - btop
          - ncdu
          - jq
          - curl

    - name: Ensure /etc/docker directory exists
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon
      copy:
        content: |
          {
            "dns": ["8.8.8.8", "8.8.4.4"]
          }
        dest: /etc/docker/daemon.json
      register: daemon_config

    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
      when: daemon_config.changed

    - name: Get Swarm join token from manager (current host)
      local_action:
        module: ansible.builtin.shell
        cmd: "docker swarm join-token worker -q"
      register: join_token
# this works docker swarm join --token TOKLENNNNNNNNN 10.137.0.5:2377
    - name: 'Join the Swarm as a worker'
      run_once: true
      community.docker.docker_swarm:
        state: join
        join_token: "{{ join_token.stdout }}"
        advertise_addr: "{{ groups['managers'][0] }}"
        remote_addrs: "{{ groups['managers'] }}"

    #    - name: Create overlay networks
    #      community.docker.docker_network:
    #        name: "{{ item }}"
    #        driver: overlay
    #        scope: swarm
    #      loop:
    #        - site
    #        - db
    #      when: inventory_hostname in groups['managers']

    - name: Ensure Locks Are Released
      shell:
        cmd: |
          while fuser /var/lib/apt/lists/lock /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock >/dev/null 2>&1; do
            sleep 2
          done
      register: locks_released
      until: locks_released.rc == 0
      retries: 10
      delay: 5

    - name: 'Install Unattended Upgrades'
      include_role:
        name: hifis.unattended_upgrades

    - name: Check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: 'Reboot server'
      reboot:
      when: reboot_required_file.stat.exists == true
