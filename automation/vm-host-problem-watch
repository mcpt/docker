#!/bin/bash

# Note to future maintainers:
# I don't know why, but whenever you indent the problem_notify calls, it just doesn't work.
# Do not indent the problem_notify calls. or you will suffer just as much as I did.

# If you are looking at this code, i'm sorry. I'm not a bash expert.
# Enjoy! :)

cd "$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd -P
)" || exit

# Ensure running on a swarm manager
if [ "$(docker info --format '{{.Swarm.ControlAvailable}}')" != "true" ]; then
  echo "This script must be run on the swarm manager" >&2
  exit 1
fi

if [ -z "$1" ]; then
  echo "Usage: $0 <problem_storage_root>" >&2
  exit 1
fi

. ../dmoj/scripts/utils/notify
. ./swarm_info

function get_judges() {
  local filter_type="$1"
  local container_names=()
  for container_name in $(docker service ls --filter name='judge_' --format "{{.$filter_type}}"); do
    container_names+=("$container_name")
  done

  echo "${container_names[@]}"
}

function formatted_judges() {
  local judges
  judges="$(get_judges Name)"

  # Remove 'judge_' prefix and replace spaces with commas
  # shellcheck disable=SC2001
  echo "${judges//judge_/}" | sed 's/ /, /g'
}

function formatted_time() {
  echo "<t:$(date +%s)>"
}

function format_problem() {
  problem_id="$1"
  echo "[$problem_id](<https://mcpt.ca/problem/$problem_id>)"

}

problem_storage_root="$(realpath "$1")"
recent_notifs_file=$(mktemp)

 problem_notify "$(formatted_time): Watching ${problem_storage_root}, notifying judges **$(formatted_judges)**"
inotifywait -rm "${problem_storage_root}" -e  move,create -q | while read -r directory action file; do
  if [ "$file" != "init.yml" ]; then
    continue
  fi

  problems_raw="$directory"
  problem=${problems_raw#"$problem_storage_root"}
  # Extract the top-level directory
  problem=$(echo "$problem" | cut -d'/' -f2)
  # shellcheck disable=SC2012
  n_problems=$(ls -1 "$problem_storage_root" | wc -l)

  #  # Check if this directory has been notified recently
  #  if ! grep -q "^${problem}:" "$recent_notifs_file"; then
  #    echo "${problem}:$(date +%s)" >>"$recent_notifs_file"
  #  else
  #    continue
  #  fi

  # If curl_container doesnt exist, create it
  if ! docker ps -a --format "{{.Names}}" | grep -q "curl_container"; then
    docker run -d --rm --network wlmoj_judge --name curl_container curlimages/curl sleep infinity
  fi

  judges_raw="$(get_judges Name)" # a string with all the judges separated by spaces
  # split judges into an array
  IFS=' ' read -r -a judges <<< "$judges_raw" # A proper array

  declare -a judge_results=()
  for judge in "${judges[@]}"; do
    judge_url="http://$judge:9995/update/problems"
    echo "Sending request to $judge_url"
    judge_results+=("$(docker exec curl_container curl -4 -s -X POST "$judge_url")")
    echo "${judge_results[-1]}" # print the last element of the array
  done
  message=""

  for i in "${!judge_results[@]}"; do
    judge="${judges[$i]}"
    result="${judge_results[$i]}"
    message+="\n-# **$judge** | $result"
  done
  case "$action" in
      MOVED_TO)
       problem_notify "-# $(formatted_time): Updated $(format_problem "$problem") | __**$n_problems**__ problems in share $message"
       ;;
#     DELETE)
#       problem_notify "-# $(formatted_time): Deleted $problem | __**$n_problems**__ problems in share $message"
#       ;;
     CREATE)
       problem_notify "-# $(formatted_time): Updated $(format_problem "$problem") | __**$n_problems**__ problems in share $message"
       ;;

  esac
  # Clean up old entries (older than 10 seconds)
  current_time=$(date +%s)
  temp_file_content=$(awk -v now="$current_time" '{split($0,a,":"); if (now - a[2] <= 10) print $0}' "$recent_notifs_file")
  echo "$temp_file_content" > "$recent_notifs_file"
done
