#!/bin/bash

cd "$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd -P
)" || exit

# Ensure running on a swarm manager
if [ "$(docker info --format '{{.Swarm.ControlAvailable}}')" != "true" ]; then
  echo "This script must be run on the swarm manager" >&2
  exit 1
fi

. ../dmoj/scripts/utils/notify
. ./swarm_info

function get_judges() {
    local filter_type="$1"
    local container_names=()
    for container_name in $(docker service ls --filter name='judge_'  --format "{{.$filter_type}}"); do
        container_names+=("$container_name")
    done

    echo "${container_names[@]}"
}

function formatted_judges() {
  local judges
  judges="$(get_judges Name)"
  echo "${judges[@]// /, }"  # Replace spaces with commas and spaces
}

function formatted_time() {
  echo "<t:$(date +%s)>"
}

function format_problem() {
  problem_id="$1"
  echo "[$problem_id](https://test.mcpt.ca/problem/$problem_id)"

}


problem_storage_root="$(realpath "$1")"
recent_notifs_file=$(mktemp)


problem_notify "$(formatted_time): Watching ${problem_storage_root}, notifying judges **$(formatted_judges)**"

inotifywait -rm "${problem_storage_root}" -e move,create,delete -q | while read -r line; do
  if [ "$(echo "$line" | cut -d' ' -f3)" != "init.yml" ]; then
    continue
  fi
  problems_raw="$(echo "$line" | cut -d' ' -f1)"
  problem=${problems_raw#"$problem_storage_root"}
  # Extract the top-level directory
  problem=$(echo "$problem" | cut -d'/' -f2)
  # shellcheck disable=SC2012
  n_problems=$(ls -1 "$problem_storage_root" | wc -l)

  # Check if this directory has been notified recently
  if ! grep -q "^${problem}:" "$recent_notifs_file"; then
    echo "${problem}:$(date +%s)" >> "$recent_notifs_file"

    problem_notify "-# $(formatted_time): Updated $(format_problem problem) on  **$(formatted_judges)** | __**$n_problems**__ problems in share"
    judges="($(get_judges ID))"
    for judge in "${judges[@]}"; do
      curl -4 -s -X POST "http://$judge:9998/update/problems" | sed "s/^/$(date) [$judge]: /"';$a\'
    done
  fi

  # Clean up old entries (older than 10 seconds)
  current_time=$(date +%s)
  temp_file_content=$(awk -v now="$current_time" '{split($0,a,":"); if (now - a[2] <= 10) print $0}' "$recent_notifs_file")
  echo "$temp_file_content" > "$recent_notifs_file"
done